// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and authorization
model User {
  id              String           @id @default(uuid())
  name            String
  email           String           @unique
  password        String
  role            Role             @default(STAFF)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  products        Product[]        // Products created by this user
  purchases       Purchase[]       // Purchases made by this user
  sales           Sale[]           // Sales made by this user
}

// Role enum for user permissions
enum Role {
  ADMIN
  MANAGER
  STAFF
}

// Product categories
model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[] // Products in this category
}

// Product model
model Product {
  id              String            @id @default(uuid())
  name            String
  sku             String            @unique
  description     String?
  price           Float
  costPrice       Float
  quantity        Int               @default(0)
  minimumStock    Int               @default(10)
  categoryId      String
  category        Category          @relation(fields: [categoryId], references: [id])
  userId          String            // User who added/updated this product
  user            User              @relation(fields: [userId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  purchaseItems   PurchaseItem[]    // Purchase items associated with this product
  saleItems       SaleItem[]        // Sale items associated with this product
  suppliers       ProductSupplier[] // Suppliers for this product
}

// Supplier model
model Supplier {
  id          String            @id @default(uuid())
  name        String
  email       String?
  phone       String?
  address     String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  purchases   Purchase[]        // Purchases from this supplier
  products    ProductSupplier[] // Products supplied by this supplier
}

// ProductSupplier join model for many-to-many relationship
model ProductSupplier {
  id          String   @id @default(uuid())
  productId   String
  supplierId  String
  isPreferred Boolean  @default(false) // Mark as preferred supplier
  unitPrice   Float?   // Optional supplier-specific unit price
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  supplier    Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@unique([productId, supplierId]) // Ensure unique product-supplier combinations
}

// Purchase model (inventory receiving)
model Purchase {
  id              String          @id @default(uuid())
  invoiceNumber   String          @unique
  supplierId      String
  supplier        Supplier        @relation(fields: [supplierId], references: [id])
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  date            DateTime
  totalAmount     Float
  status          PurchaseStatus  @default(PENDING)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  purchaseItems   PurchaseItem[]  // Items in this purchase
}

// Purchase status enum
enum PurchaseStatus {
  PENDING
  COMPLETED
  CANCELLED
}

// Purchase item model
model PurchaseItem {
  id          String    @id @default(uuid())
  purchaseId  String
  purchase    Purchase  @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  costPrice   Float
  totalCost   Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Customer model
model Customer {
  id          String    @id @default(uuid())
  name        String
  email       String?
  phone       String?
  address     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  sales       Sale[]    // Sales to this customer
}

// Sale model (inventory outgoing)
model Sale {
  id            String      @id @default(uuid())
  invoiceNumber String      @unique
  customerId    String
  customer      Customer    @relation(fields: [customerId], references: [id])
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  date          DateTime
  totalAmount   Float
  discount      Float       @default(0)
  tax           Float       @default(0)
  paymentMethod String      @default("CASH")
  status        SaleStatus  @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  saleItems     SaleItem[]  // Items in this sale
}

// Sale status enum
enum SaleStatus {
  PENDING
  COMPLETED
  CANCELLED
}

// Sale item model
model SaleItem {
  id          String    @id @default(uuid())
  saleId      String
  sale        Sale      @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  quantity    Int
  price       Float
  totalPrice  Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Inventory transaction log
model InventoryLog {
  id            String          @id @default(uuid())
  productId     String
  quantity      Int
  type          TransactionType
  reference     String
  notes         String?
  createdAt     DateTime        @default(now())
}

// Transaction type enum
enum TransactionType {
  PURCHASE
  SALE
  ADJUSTMENT
  RETURN
  WRITE_OFF
}
